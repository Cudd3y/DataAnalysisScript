data$TargetClicked[data$TargetClicked < data$TargetHighlighted & (lead(data$TargetClicked) - data$TargetClicked) < 0] <- NA
TargetHighlighted[data$TargetClicked < data$TargetHighlighted & (lead(data$TargetHighlighted) - data$TargetHighlighted) < 0] <- NA
data$TargetHighlighted[data$TargetClicked < data$TargetHighlighted & (lead(data$TargetHighlighted) - data$TargetHighlighted) < 0] <- NA
## Clear workspace
rm(list=ls())
# =============================================
# Load Packages
pacman::p_load(
# data processing
plyr,
tidyverse,  # collection of the tidyverse packages
stringr,    #   - for string functions
forcats,    #   - utility functions for working with factor levels
lubridate,  #   - utility for parsing and performing arithematic on dates
tools,      #   - for package development, administration and documentation
data.table, #   - for data manipulation
tibble,      #   - to create data frames
broom      #   - for tidy()
)
# Create a function that imports all .csv files from a directory "ExperimentalData"
# TODO: Put the gathered data in the "ExperimentalData" Folder & use the second line below
file_list <- list.files(path = file.path("PilotData"), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
# file_list <- list.files(path = file.path("ExperimentalData"), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
data_raw <- do.call("rbind", lapply(file_list, function(filename)
data.frame(read.delim(filename, sep = ";"))))
# Keep only the columns of interest and give them more readable names
data <- data_raw %>%
select(
Participant = Part,
Condition = Cond,
TrialNumber = Trial,
Block,
TargetNumber = Click,
TargetIsHit = Succ,
TargetHighlighted = Click_t,
TargetClicked = Tar_t,
PosX,
PosY,
Distance = Dist
)
# TODO Delete this part if the Demo-Block is no longer included in the data
# Remove all Demo Trial from the data set
data <- data %>%
filter(Block != "0")
data$Participant <- as.factor(data$Participant)
# Renaming of cell values in a more meaningful way
data$Condition[data$Condition == '0'] <- "Regular Edge"
data$Condition[data$Condition == '1'] <- "Virtual Edge"
data$Condition <- as.factor(data$Condition)
data$TrialNumber <- as.factor(data$TrialNumber)
data$Block <- as.factor(data$Block)
# TODO Control if dataformat still matches the one from the files imported
data$TargetHighlighted <- as.POSIXct(data$TargetHighlighted, format = "%d-%m-%Y %H:%M:%S:%OS")
data$TargetClicked <- as.POSIXct(data$TargetClicked, format = "%d-%m-%Y %H:%M:%S:%OS")
# ERROR MANAGEMENT
# if the target click lays before the target highlight, we look which of the target click value or the target highlight value is odd and remove this one. By odd, we mean that the difference with the next value in the same column is negative.
data$TargetClicked[data$TargetClicked < data$TargetHighlighted & (lead(data$TargetClicked) - data$TargetClicked) < 0] <- NA
data$TargetHighlighted[data$TargetClicked < data$TargetHighlighted & (lead(data$TargetHighlighted) - data$TargetHighlighted) < 0] <- NA
# Add Columns with the start time and the end time of a block
data <- data %>%
mutate(Block_start = case_when(TargetNumber == 1 ~ TargetHighlighted, TargetNumber == 2 ~ lag(TargetHighlighted, 1), TargetNumber == 3 ~ lag(TargetHighlighted, 2), TargetNumber == 4 ~ lag(TargetHighlighted, 3), TargetNumber == 5 ~ lag(TargetHighlighted, 4))) %>%
mutate(Block_end = case_when(TargetNumber == 1 ~ lead(TargetClicked, 4), TargetNumber == 2 ~ lead(TargetClicked, 3), TargetNumber == 3 ~ lead(TargetClicked, 2), TargetNumber == 4 ~ lead(TargetClicked, 1), TargetNumber == 5 ~ TargetClicked)) %>%
select (Participant, Condition, TrialNumber, Block, TargetNumber, Block_start, Block_end, TargetIsHit, TargetHighlighted, TargetClicked, PosX, PosY, Distance)
View(data)
}
1-NA
if NA < 1 {2+2}
if (NA < 1) {2+2}
# if the block end lays after the block start
dat_error <- data[data$Block_start > data$Block_end, ]
View(dat_error)
# ERROR MANAGEMENT
# if the target click lays before the target highlight, we look which of the target click value or the target highlight value is odd and remove this one. By odd, we mean that the difference with the next value in the same column is negative.
data$TargetClicked[data$TargetClicked < data$TargetHighlighted & (data$TargetClicked - lag(data$TargetClicked)) < 0] <- NA
# if the block end lays after the block start
dat_error <- data[data$Block_start > data$Block_end, ]
View(dat_error)
data <- data %>%
mutate(Block_start = case_when(TargetNumber == 1 ~ TargetHighlighted, TargetNumber == 2 ~ lag(TargetHighlighted, 1), TargetNumber == 3 ~ lag(TargetHighlighted, 2), TargetNumber == 4 ~ lag(TargetHighlighted, 3), TargetNumber == 5 ~ lag(TargetHighlighted, 4))) %>%
mutate(Block_end = case_when(TargetNumber == 1 ~ lead(TargetClicked, 4), TargetNumber == 2 ~ lead(TargetClicked, 3), TargetNumber == 3 ~ lead(TargetClicked, 2), TargetNumber == 4 ~ lead(TargetClicked, 1), TargetNumber == 5 ~ TargetClicked)) %>%
select (Participant, Condition, TrialNumber, Block, TargetNumber, Block_start, Block_end, TargetIsHit, TargetHighlighted, TargetClicked, PosX, PosY, Distance)
# if the block end lays after the block start
dat_error <- data[data$Block_start > data$Block_end, ]
View(dat_error)
# ERROR MANAGEMENT
# if the target click lays before the target highlight, we look which of the target click value or the target highlight value is odd and remove this one. By odd, we mean that the difference with the next value in the same column is negative (for both the lagged and lead value).
data$TargetClicked[data$TargetClicked < data$TargetHighlighted & (data$TargetClicked - lag(data$TargetClicked) < 0 | lead(data$TargetClicked) - data$TargetClicked < 0)] <- NA
data$TargetHighlighted[data$TargetClicked < data$TargetHighlighted & (lead(data$TargetHighlighted) - data$TargetHighlighted < 0 | data$TargetHighlighted - lag(data$TargetHighlighted) < 0)] <- NA
# Keep only the columns of interest and give them more readable names
data <- data_raw %>%
select(
Participant = Part,
Condition = Cond,
TrialNumber = Trial,
Block,
TargetNumber = Click,
TargetIsHit = Succ,
TargetHighlighted = Click_t,
TargetClicked = Tar_t,
PosX,
PosY,
Distance = Dist
)
# TODO Delete this part if the Demo-Block is no longer included in the data
# Remove all Demo Trial from the data set
data <- data %>%
filter(Block != "0")
data$Participant <- as.factor(data$Participant)
# Renaming of cell values in a more meaningful way
data$Condition[data$Condition == '0'] <- "Regular Edge"
data$Condition[data$Condition == '1'] <- "Virtual Edge"
data$Condition <- as.factor(data$Condition)
data$TrialNumber <- as.factor(data$TrialNumber)
data$Block <- as.factor(data$Block)
# TODO Control if dataformat still matches the one from the files imported
data$TargetHighlighted <- as.POSIXct(data$TargetHighlighted, format = "%d-%m-%Y %H:%M:%S:%OS")
data$TargetClicked <- as.POSIXct(data$TargetClicked, format = "%d-%m-%Y %H:%M:%S:%OS")
data$TargetClicked[data$TargetClicked < data$TargetHighlighted & (data$TargetClicked - lag(data$TargetClicked) < 0 | lead(data$TargetClicked) - data$TargetClicked < 0)] <- NA
data$TargetHighlighted[data$TargetClicked < data$TargetHighlighted & (lead(data$TargetHighlighted) - data$TargetHighlighted < 0 | data$TargetHighlighted - lag(data$TargetHighlighted) < 0)] <- NA
data <- data %>%
mutate(Block_start = case_when(TargetNumber == 1 ~ TargetHighlighted, TargetNumber == 2 ~ lag(TargetHighlighted, 1), TargetNumber == 3 ~ lag(TargetHighlighted, 2), TargetNumber == 4 ~ lag(TargetHighlighted, 3), TargetNumber == 5 ~ lag(TargetHighlighted, 4))) %>%
mutate(Block_end = case_when(TargetNumber == 1 ~ lead(TargetClicked, 4), TargetNumber == 2 ~ lead(TargetClicked, 3), TargetNumber == 3 ~ lead(TargetClicked, 2), TargetNumber == 4 ~ lead(TargetClicked, 1), TargetNumber == 5 ~ TargetClicked)) %>%
select (Participant, Condition, TrialNumber, Block, TargetNumber, Block_start, Block_end, TargetIsHit, TargetHighlighted, TargetClicked, PosX, PosY, Distance)
# if the block end lays after the block start
dat_error <- data[data$Block_start > data$Block_end, ]
View(dat_error)
# Keep only the columns of interest and give them more readable names
data <- data_raw %>%
select(
Participant = Part,
Condition = Cond,
TrialNumber = Trial,
Block,
TargetNumber = Click,
TargetIsHit = Succ,
TargetHighlighted = Click_t,
TargetClicked = Tar_t,
PosX,
PosY,
Distance = Dist
)
# TODO Delete this part if the Demo-Block is no longer included in the data
# Remove all Demo Trial from the data set
data <- data %>%
filter(Block != "0")
data$Participant <- as.factor(data$Participant)
# Renaming of cell values in a more meaningful way
data$Condition[data$Condition == '0'] <- "Regular Edge"
data$Condition[data$Condition == '1'] <- "Virtual Edge"
data$Condition <- as.factor(data$Condition)
#data$TrialNumber <- as.factor(data$TrialNumber)
#data$Block <- as.factor(data$Block)
# TODO Control if dataformat still matches the one from the files imported
data$TargetHighlighted <- as.POSIXct(data$TargetHighlighted, format = "%d-%m-%Y %H:%M:%S:%OS")
data$TargetClicked <- as.POSIXct(data$TargetClicked, format = "%d-%m-%Y %H:%M:%S:%OS")
View(data)
# if the block end lays after the block start
dat_error <- data[data$Block_start > data$Block_end, ]
View(dat_error)
data$TargetClicked[data$TargetClicked < data$TargetHighlighted & (data$TargetClicked - lag(data$TargetClicked) < 0 | lead(data$TargetClicked) - data$TargetClicked < 0)] <- NA
data$TargetHighlighted[data$TargetClicked < data$TargetHighlighted & (lead(data$TargetHighlighted) - data$TargetHighlighted < 0 | data$TargetHighlighted - lag(data$TargetHighlighted) < 0)] <- NA
# Add Columns with the start time and the end time of a block
data <- data %>%
mutate(Block_start = case_when(TargetNumber == 1 ~ TargetHighlighted, TargetNumber == 2 ~ lag(TargetHighlighted, 1), TargetNumber == 3 ~ lag(TargetHighlighted, 2), TargetNumber == 4 ~ lag(TargetHighlighted, 3), TargetNumber == 5 ~ lag(TargetHighlighted, 4))) %>%
mutate(Block_end = case_when(TargetNumber == 1 ~ lead(TargetClicked, 4), TargetNumber == 2 ~ lead(TargetClicked, 3), TargetNumber == 3 ~ lead(TargetClicked, 2), TargetNumber == 4 ~ lead(TargetClicked, 1), TargetNumber == 5 ~ TargetClicked)) %>%
select (Participant, Condition, TrialNumber, Block, TargetNumber, Block_start, Block_end, TargetIsHit, TargetHighlighted, TargetClicked, PosX, PosY, Distance)
# if the block end lays after the block start
dat_error <- data[data$Block_start > data$Block_end, ]
View(dat_error)
## Clear workspace
rm(list=ls())
# =============================================
# Load Packages
pacman::p_load(
# data processing
plyr,
tidyverse,  # collection of the tidyverse packages
stringr,    #   - for string functions
forcats,    #   - utility functions for working with factor levels
lubridate,  #   - utility for parsing and performing arithematic on dates
tools,      #   - for package development, administration and documentation
data.table, #   - for data manipulation
tibble,      #   - to create data frames
broom      #   - for tidy()
)
# Create a function that imports all .csv files from a directory "ExperimentalData"
# TODO: Put the gathered data in the "ExperimentalData" Folder & use the second line below
file_list <- list.files(path = file.path("PilotData"), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
# file_list <- list.files(path = file.path("ExperimentalData"), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
data_raw <- do.call("rbind", lapply(file_list, function(filename)
data.frame(read.delim(filename, sep = ";"))))
# Keep only the columns of interest and give them more readable names
data <- data_raw %>%
select(
Participant = Part,
Condition = Cond,
TrialNumber = Trial,
Block,
TargetNumber = Click,
TargetIsHit = Succ,
TargetHighlighted = Click_t,
TargetClicked = Tar_t,
PosX,
PosY,
Distance = Dist
)
# TODO Delete this part if the Demo-Block is no longer included in the data
# Remove all Demo Trial from the data set
data <- data %>%
filter(Block != "0")
data$Participant <- as.factor(data$Participant)
# Renaming of cell values in a more meaningful way
data$Condition[data$Condition == '0'] <- "Regular Edge"
data$Condition[data$Condition == '1'] <- "Virtual Edge"
data$Condition <- as.factor(data$Condition)
#data$TrialNumber <- as.factor(data$TrialNumber)
#data$Block <- as.factor(data$Block)
# TODO Control if dataformat still matches the one from the files imported
data$TargetHighlighted <- as.POSIXct(data$TargetHighlighted, format = "%d-%m-%Y %H:%M:%S:%OS")
data$TargetClicked <- as.POSIXct(data$TargetClicked, format = "%d-%m-%Y %H:%M:%S:%OS")
# ERROR MANAGEMENT
dat_error <- data[data$Block_start > data$Block_end, ]
# if the target click lays before the target highlight, we look which of the target click value or the target highlight value is odd and remove this one. By odd, we mean that the difference with the next value in the same column is negative (for both the lagged and lead value).
data$TargetClicked[data$TargetClicked < data$TargetHighlighted & (data$TargetClicked - lag(data$TargetClicked) < 0 | lead(data$TargetClicked) - data$TargetClicked < 0)] <- NA
data$TargetHighlighted[data$TargetClicked < data$TargetHighlighted & (lead(data$TargetHighlighted) - data$TargetHighlighted < 0 | data$TargetHighlighted - lag(data$TargetHighlighted) < 0)] <- NA
# Add Columns with the start time and the end time of a block
data <- data %>%
mutate(Block_start = case_when(TargetNumber == 1 ~ TargetHighlighted, TargetNumber == 2 ~ lag(TargetHighlighted, 1), TargetNumber == 3 ~ lag(TargetHighlighted, 2), TargetNumber == 4 ~ lag(TargetHighlighted, 3), TargetNumber == 5 ~ lag(TargetHighlighted, 4))) %>%
mutate(Block_end = case_when(TargetNumber == 1 ~ lead(TargetClicked, 4), TargetNumber == 2 ~ lead(TargetClicked, 3), TargetNumber == 3 ~ lead(TargetClicked, 2), TargetNumber == 4 ~ case_when(lead(TargetNumber) == 5 ~ lead(TargetClicked, 1), lead(TargetNumber) != 5 ~ TargetClicked), TargetNumber == 5 ~ TargetClicked)) %>%
select (Participant, Condition, TrialNumber, Block, TargetNumber, Block_start, Block_end, TargetIsHit, TargetHighlighted, TargetClicked, PosX, PosY, Distance)
# if the block end lays after the block start, we set block end and target click time to NA (should not be the case after the previous steps)
data$Block_end[data$Block_start > data$Block_end] <- NA
data$TargetClicked[data$Block_start > data$Block_end] <- NA
# if the time of the target highlight or the target click lays outside of the block time window, the value is turned to NA
data$TargetHighlighted[data$TargetHighlighted < data$Block_start | data$TargetHighlighted > data$Block_end] <- NA
data$TargetClicked[data$TargetClicked < data$Block_start | data$TargetClicked > data$Block_end] <- NA
# COMPUTE MOVEMENT TIME AND SHOW ERRORS
data <- data %>%
mutate(MovementTime = as.numeric(TargetClicked - TargetHighlighted, unit ="secs"))
data$TargetIsHit[data$TargetIsHit == '0'] <- FALSE
data$TargetIsHit[data$TargetIsHit == '1'] <- TRUE
View(data)
data_per_block <- data %>%
group_by(Participant, Condition, TrialNumber, Block)  %>%
summarise(ErrorRate = 1 - mean(TargetIsHit))
View(data_per_block)
View(data)
1+2+ NA
data_per_block <- data %>%
group_by(Participant, Condition, TrialNumber, Block)  %>%
summarise(ErrorRate = 1 - mean(TargetIsHit, na.rm = T)) %>%
summarise(MovementTime = sum(MovementTime, na.rm = T))
data_per_block <- data %>%
group_by(Participant, Condition, TrialNumber, Block)  %>%
summarise(ErrorRate = 1 - mean(TargetIsHit, na.rm = T))
View(data_per_block)
data_per_block <- data %>%
group_by(Participant, Condition, TrialNumber, Block)  %>%
summarise(ErrorRate = 1 - mean(TargetIsHit, na.rm = T), MovementTime = sum(MovementTime, na.rm = T))
View(data_per_block)
data$TargetClicked[data$TargetClicked - data$TargetHighlighted > 20] <- NA
## Clear workspace
rm(list=ls())
# =============================================
# Load Packages
pacman::p_load(
# data processing
plyr,
tidyverse,  # collection of the tidyverse packages
stringr,    #   - for string functions
forcats,    #   - utility functions for working with factor levels
lubridate,  #   - utility for parsing and performing arithematic on dates
tools,      #   - for package development, administration and documentation
data.table, #   - for data manipulation
tibble,      #   - to create data frames
broom      #   - for tidy()
)
## Clear workspace
rm(list=ls())
# =============================================
# Load Packages
pacman::p_load(
# data processing
plyr,
tidyverse,  # collection of the tidyverse packages
stringr,    #   - for string functions
forcats,    #   - utility functions for working with factor levels
lubridate,  #   - utility for parsing and performing arithematic on dates
tools,      #   - for package development, administration and documentation
data.table, #   - for data manipulation
tibble,      #   - to create data frames
broom      #   - for tidy()
)
# Create a function that imports all .csv files from a directory "ExperimentalData"
# TODO: Put the gathered data in the "ExperimentalData" Folder & use the second line below
file_list <- list.files(path = file.path("PilotData"), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
# file_list <- list.files(path = file.path("ExperimentalData"), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
data_raw <- do.call("rbind", lapply(file_list, function(filename)
data.frame(read.delim(filename, sep = ";"))))
# Keep only the columns of interest and give them more readable names
data <- data_raw %>%
select(
Participant = Part,
Condition = Cond,
TrialNumber = Trial,
Block,
TargetNumber = Click,
TargetIsHit = Succ,
TargetHighlighted = Click_t,
TargetClicked = Tar_t,
PosX,
PosY,
Distance = Dist
)
# TODO Delete this part if the Demo-Block is no longer included in the data
# Remove all Demo Trial from the data set
data <- data %>%
filter(Block != "0")
data$Participant <- as.factor(data$Participant)
# Renaming of cell values in a more meaningful way
data$Condition[data$Condition == '0'] <- "Regular Edge"
data$Condition[data$Condition == '1'] <- "Virtual Edge"
data$Condition <- as.factor(data$Condition)
#data$TrialNumber <- as.factor(data$TrialNumber)
#data$Block <- as.factor(data$Block)
# TODO Control if dataformat still matches the one from the files imported
data$TargetHighlighted <- as.POSIXct(data$TargetHighlighted, format = "%d-%m-%Y %H:%M:%S:%OS")
data$TargetClicked <- as.POSIXct(data$TargetClicked, format = "%d-%m-%Y %H:%M:%S:%OS")
# ERROR MANAGEMENT
dat_error <- data[data$Block_start > data$Block_end, ]
# if the target click lays before the target highlight, we look which of the target click value or the target highlight value is odd and remove this one. By odd, we mean that the difference with the next value in the same column is negative (for both the lagged and lead value).
data$TargetClicked[data$TargetClicked < data$TargetHighlighted & (data$TargetClicked - lag(data$TargetClicked) < 0 | lead(data$TargetClicked) - data$TargetClicked < 0)] <- NA
data$TargetHighlighted[data$TargetClicked < data$TargetHighlighted & (lead(data$TargetHighlighted) - data$TargetHighlighted < 0 | data$TargetHighlighted - lag(data$TargetHighlighted) < 0)] <- NA
# Add Columns with the start time and the end time of a block
data <- data %>%
mutate(Block_start = case_when(TargetNumber == 1 ~ TargetHighlighted, TargetNumber == 2 ~ lag(TargetHighlighted, 1), TargetNumber == 3 ~ lag(TargetHighlighted, 2), TargetNumber == 4 ~ lag(TargetHighlighted, 3), TargetNumber == 5 ~ lag(TargetHighlighted, 4))) %>%
mutate(Block_end = case_when(TargetNumber == 1 ~ lead(TargetClicked, 4), TargetNumber == 2 ~ lead(TargetClicked, 3), TargetNumber == 3 ~ lead(TargetClicked, 2), TargetNumber == 4 ~ case_when(lead(TargetNumber) == 5 ~ lead(TargetClicked, 1), lead(TargetNumber) != 5 ~ TargetClicked), TargetNumber == 5 ~ TargetClicked)) %>%
select (Participant, Condition, TrialNumber, Block, TargetNumber, Block_start, Block_end, TargetIsHit, TargetHighlighted, TargetClicked, PosX, PosY, Distance)
# if the block end lays after the block start, we set block end and target click time to NA (should not be the case after the previous steps)
data$Block_end[data$Block_start > data$Block_end] <- NA
data$TargetClicked[data$Block_start > data$Block_end] <- NA
# if the time of the target highlight or the target click lays outside of the block time window, the value is turned to NA
data$TargetHighlighted[data$TargetHighlighted < data$Block_start | data$TargetHighlighted > data$Block_end] <- NA
data$TargetClicked[data$TargetClicked < data$Block_start | data$TargetClicked > data$Block_end] <- NA
data$TargetClicked[data$TargetClicked - data$TargetHighlighted > 20] <- NA
# COMPUTE MOVEMENT TIME AND SHOW ERRORS
data <- data %>%
mutate(MovementTime = as.numeric(TargetClicked - TargetHighlighted, unit ="secs"))
data$TargetIsHit[data$TargetIsHit == '0'] <- FALSE
data$TargetIsHit[data$TargetIsHit == '1'] <- TRUE
data_per_trial <- aggregate(MovementTime ~ Condition + Participant + TrialNumber, data = data_per_block, sum) %>%
aggregate(ErrorRate ~ Condition + Participant + TrialNumber, data = data_per_block, mean)
data_per_block <- data %>%
group_by(Participant, Condition, TrialNumber, Block)  %>%
summarise(ErrorRate = 1 - mean(TargetIsHit, na.rm = T), MovementTime = sum(MovementTime, na.rm = T))
data_per_trial <- aggregate(MovementTime ~ Condition + Participant + TrialNumber, data = data_per_block, sum) %>%
aggregate(ErrorRate ~ Condition + Participant + TrialNumber, data = data_per_block, mean)
data_per_trial <- data %>%
group_by(Participant, Condition, TrialNumber)  %>%
summarise(ErrorRate = 1 - mean(TargetIsHit, na.rm = T), MovementTime = sum(MovementTime, na.rm = T))
ggplot (data = data_per_trial[Condition == "Regular Edge"], mapping = aes(x = TrialNumber, y = MovementTime, col = Participant, group = Participant)) +
geom_point() +
geom_line() +
labs(x = 'Trial Number - Regular Edge', y = 'Movement Time per Trial in sec')
ggplot (data = data_per_trial[data_per_trial$Condition == "Regular Edge"], mapping = aes(x = TrialNumber, y = MovementTime, col = Participant, group = Participant)) +
geom_point() +
geom_line() +
labs(x = 'Trial Number - Regular Edge', y = 'Movement Time per Trial in sec')
data_per_trial_regular_edge <- data_per_trial %>%
filter(Condition == "Regular Edge")
# Data for trials in Virtual Edge condition
data_per_trial_virtual_edge <- data_per_trial %>%
filter(Condition == "Virtual Edge")
ggplot (data = data_per_trial_regular_edge, mapping = aes(x = TrialNumber, y = MovementTime, col = Participant, group = Participant)) +
geom_point() +
geom_line() +
labs(x = 'Trial Number - Regular Edge', y = 'Movement Time per Trial in sec')
# Lineplot of the calculated error rate average
ggplot (data = data_per_trial_regular_edge, mapping = aes(x = TrialNumber, y = ErrorRate, col = Participant, group = Participant)) +
geom_point() +
geom_line() +
labs(x = 'Trial Number - Regular Edge', y = 'Error Rate in %')
ggplot (data = data_per_trial_virtual_edge, mapping = aes(x = TrialNumber, y = MovementTime, col = Participant, group = Participant)) +
geom_point() +
geom_line() +
labs(x = 'Trial Number - Virtual Edge', y = 'Movement Time per Trial in sec')
# Lineplot of the calculated error rate average
ggplot (data = data_per_trial_virtual_edge, mapping = aes(x = TrialNumber, y = ErrorRate, col = Participant, group = Participant)) +
geom_point() +
geom_line() +
labs(x = 'Trial Number - Virtual Edge', y = 'Error Rate in %')
p_time <-
data_per_trial_regular_edge %>%
ggplot(., aes(x = TrialNumber, y = MovementTime)) +
geom_point() +
geom_smooth(method = "lm", size = 1.5, color = "red")
p_time
p_time1 <-
data_per_trial_virtual_edge %>%
ggplot(., aes(x = TrialNumber, y = MovementTime)) +
geom_point() +
geom_smooth(method = "lm", size = 1.5, color = "red")
p_time1
fit_movementTime <- lm(MovementTime ~ Condition + TrialNumber, data_per_trial)
summary(fit_movementTime)
p_M_C_resid <- data_per_trial %>%
ggplot(., aes(x = MovementTime, y = fit_movementTime$residuals)) +
geom_point() +
geom_hline(yintercept = 0, col = "red")
p_M_C_resid
car::qqPlot(fit_movementTime$residuals)
anova_r <- anova(fit_movementTime)
anova_r
anova_t <- tidy(anova_r)   # extract parameters for the report
step_backward_result <-
MASS::stepAIC(fit_movementTime,
direction = "backward",
trace = TRUE
)
fit_errorRate <- lm(ErrorRate ~ Condition + TrialNumber, data_per_trial)
summary(fit_errorRate)
p_E_C_resid <- data_per_trial %>%
ggplot(., aes(x = ErrorRate, y = fit_errorRate$residuals)) +
geom_point() +
geom_hline(yintercept = 0, col = "red")
p_E_C_resid
car::qqPlot(fit_errorRate$residuals)
anova_r <- anova(fit_errorRate)
anova_r
anova_t <- tidy(anova_r)   # extract parameters for the report
step_backward_result <-
MASS::stepAIC(fit_errorRate,
direction = "backward",
trace = TRUE
)
# Create a function that imports all .csv files from a directory "ExperimentalData"
# TODO: Put the gathered data in the "ExperimentalData" Folder & use the second line below
file_list <- list.files(path = file.path("PilotData"), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
# file_list <- list.files(path = file.path("ExperimentalData"), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
data_raw <- do.call("rbind", lapply(file_list, function(filename)
data.frame(read.delim(filename, sep = ";"))))
View(data_raw)
View(data)
View(data_raw)
View(data_raw)
# TODO Control if dataformat still matches the one from the files imported
data$TargetHighlighted <- as.POSIXct(data$TargetHighlighted, format = "%d-%m-%Y %H:%M:%OS")
data$TargetClicked <- as.POSIXct(data$TargetClicked, format = "%d-%m-%Y %H:%M:%OS")
# Keep only the columns of interest and give them more readable names
data <- data_raw %>%
select(
Participant = Part,
Condition = Cond,
TrialNumber = Trial,
Block,
TargetNumber = Click,
TargetIsHit = Succ,
TargetHighlighted = Click_t,
TargetClicked = Tar_t,
PosX,
PosY,
Distance = Dist
)
# TODO Delete this part if the Demo-Block is no longer included in the data
# Remove all Demo Trial from the data set
data <- data %>%
filter(Block != "0")
data$Participant <- as.factor(data$Participant)
# Renaming of cell values in a more meaningful way
data$Condition[data$Condition == '0'] <- "Regular Edge"
data$Condition[data$Condition == '1'] <- "Virtual Edge"
data$Condition <- as.factor(data$Condition)
#data$TrialNumber <- as.factor(data$TrialNumber)
#data$Block <- as.factor(data$Block)
# TODO Control if dataformat still matches the one from the files imported
data$TargetHighlighted <- as.POSIXct(data$TargetHighlighted, format = "%d-%m-%Y %H:%M:%OS")
data$TargetClicked <- as.POSIXct(data$TargetClicked, format = "%d-%m-%Y %H:%M:%OS")
# ERROR MANAGEMENT
dat_error <- data[data$Block_start > data$Block_end, ]
# if the target click lays before the target highlight, we look which of the target click value or the target highlight value is odd and remove this one. By odd, we mean that the difference with the next value in the same column is negative (for both the lagged and lead value).
data$TargetClicked[data$TargetClicked < data$TargetHighlighted & (data$TargetClicked - lag(data$TargetClicked) < 0 | lead(data$TargetClicked) - data$TargetClicked < 0)] <- NA
data$TargetHighlighted[data$TargetClicked < data$TargetHighlighted & (lead(data$TargetHighlighted) - data$TargetHighlighted < 0 | data$TargetHighlighted - lag(data$TargetHighlighted) < 0)] <- NA
# Add Columns with the start time and the end time of a block
data <- data %>%
mutate(Block_start = case_when(TargetNumber == 1 ~ TargetHighlighted, TargetNumber == 2 ~ lag(TargetHighlighted, 1), TargetNumber == 3 ~ lag(TargetHighlighted, 2), TargetNumber == 4 ~ lag(TargetHighlighted, 3), TargetNumber == 5 ~ lag(TargetHighlighted, 4))) %>%
mutate(Block_end = case_when(TargetNumber == 1 ~ lead(TargetClicked, 4), TargetNumber == 2 ~ lead(TargetClicked, 3), TargetNumber == 3 ~ lead(TargetClicked, 2), TargetNumber == 4 ~ case_when(lead(TargetNumber) == 5 ~ lead(TargetClicked, 1), lead(TargetNumber) != 5 ~ TargetClicked), TargetNumber == 5 ~ TargetClicked)) %>%
select (Participant, Condition, TrialNumber, Block, TargetNumber, Block_start, Block_end, TargetIsHit, TargetHighlighted, TargetClicked, PosX, PosY, Distance)
# if the block end lays after the block start, we set block end and target click time to NA (should not be the case after the previous steps)
data$Block_end[data$Block_start > data$Block_end] <- NA
data$TargetClicked[data$Block_start > data$Block_end] <- NA
# if the time of the target highlight or the target click lays outside of the block time window, the value is turned to NA
data$TargetHighlighted[data$TargetHighlighted < data$Block_start | data$TargetHighlighted > data$Block_end] <- NA
data$TargetClicked[data$TargetClicked < data$Block_start | data$TargetClicked > data$Block_end] <- NA
data$TargetClicked[data$TargetClicked - data$TargetHighlighted > 20] <- NA
# COMPUTE MOVEMENT TIME AND SHOW ERRORS
data <- data %>%
mutate(MovementTime = as.numeric(TargetClicked - TargetHighlighted, unit ="secs"))
data$TargetIsHit[data$TargetIsHit == '0'] <- FALSE
data$TargetIsHit[data$TargetIsHit == '1'] <- TRUE
data <- data %>%
mutate(mvt = TargetClicked - TargetHighlighted)
# TODO Control if dataformat still matches the one from the files imported
data$TargetHighlighted <- as.POSIXct(data$TargetHighlighted, format = "%d-%m-%Y %H:%M:%OS")
# TODO Control if dataformat still matches the one from the files imported
data$TargetHighlighted <- as.POSIXct(data$TargetHighlighted, format = "%d-%m-%Y %H:%M:%S:%OS3")
options(digits.secs = 3)
# TODO Control if dataformat still matches the one from the files imported
data$TargetHighlighted <- as.POSIXct(data$TargetHighlighted, format = "%d-%m-%Y %H:%M:%OS3")
options(digits.secs = 3)
# TODO Control if dataformat still matches the one from the files imported
data$TargetHighlighted <- as.POSIXct(data$TargetHighlighted, format = "%d-%m-%Y %H:%M:%OS3")
data$TargetClicked <- as.POSIXct(data$TargetClicked, format = "%d-%m-%Y %H:%M:%OS3")
