broom      #   - for tidy()
)
## Clear workspace
rm(list=ls())
# Load Packages
pacman::p_load(
# data processing
plyr,
tidyverse,  # collection of the tidyverse packages
stringr,    #   - for string functions
forcats,    #   - utility functions for working with factor levels
lubridate,  #   - utility for parsing and performing arithematic on dates
tools,      #   - for package development, administration and documentation
data.table, #   - for data manipulation
tibble,      #   - to create data frames
broom      #   - for tidy()
)
# Create a function that imports all .csv files from a directory "ExperimentalData"
# Put all your data files from the data collection software in the folder "ExperimentalData".
# file_list <- list.files(path = file.path("ExperimentalData"), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
# data_raw <- do.call("rbind", lapply(file_list, function(filename)
# data.frame(read.delim(filename, sep = ";"))))
# because of a coding problem, participants 11 - 17 were coded as 1 - 7. To correct this problem, we import the data for each participant separately.
data1 <- data.frame(read.delim("ExperimentalData/pointing_1.csv", sep = ";"))
data2 <- data.frame(read.delim("ExperimentalData/pointing_2.csv", sep = ";"))
data3 <- data.frame(read.delim("ExperimentalData/pointing_3.csv", sep = ";"))
data4 <- data.frame(read.delim("ExperimentalData/pointing_4.csv", sep = ";"))
data5 <- data.frame(read.delim("ExperimentalData/pointing_5.csv", sep = ";"))
data6 <- data.frame(read.delim("ExperimentalData/pointing_6.csv", sep = ";"))
data7 <- data.frame(read.delim("ExperimentalData/pointing_7.csv", sep = ";"))
data8 <- data.frame(read.delim("ExperimentalData/pointing_8.csv", sep = ";"))
data9 <- data.frame(read.delim("ExperimentalData/pointing_9.csv", sep = ";"))
data10 <- data.frame(read.delim("ExperimentalData/pointing_10.csv", sep = ";"))
data11 <- data.frame(read.delim("ExperimentalData/pointing_11.csv", sep = ";"))
data11$Part <- rep(11,nrow(data11))
data12 <- data.frame(read.delim("ExperimentalData/pointing_12.csv", sep = ";"))
data12$Part <- rep(12,nrow(data12))
data13 <- data.frame(read.delim("ExperimentalData/pointing_13.csv", sep = ";"))
data13$Part <- rep(13,nrow(data13))
data14 <- data.frame(read.delim("ExperimentalData/pointing_14.csv", sep = ";"))
data14$Part <- rep(14,nrow(data14))
data15 <- data.frame(read.delim("ExperimentalData/pointing_15.csv", sep = ";"))
data15$Part <- rep(15,nrow(data15))
data16 <- data.frame(read.delim("ExperimentalData/pointing_16.csv", sep = ";"))
data16$Part <- rep(16,nrow(data16))
data17 <- data.frame(read.delim("ExperimentalData/pointing_17.csv", sep = ";"))
data17$Part <- rep(17,nrow(data17))
data_raw <- rbind(data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11, data12, data13, data14, data15, data16, data17)
rm(data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11, data12, data13, data14, data15, data16, data17)
# Keep only the columns of interest and give them more readable names
data <- data_raw %>%
select(
Participant = Part,
Condition = Cond,
TrialNumber = Rep,
Block,
TargetNumber = Click,
TargetIsHit = Succ,
TargetHighlighted = Tar_t,
TargetClicked = Click_t,
PosX,
PosY,
Distance = Dist
)
# Remove all Demo Trial from the data set
data <- data %>%
filter(TrialNumber != "demo")
data$Participant <- as.factor(data$Participant)
data$Block <- as.factor(data$Block)
# Renaming of cell values in a more meaningful way
data$Condition[data$Condition == '0'] <- "Regular Edge"
data$Condition[data$Condition == '1'] <- "Virtual Edge"
data$Condition <- as.factor(data$Condition)
options(digits.secs = 3) # Set accuracy to one millisecond
# Convert the timestamps into a time format
data$TargetHighlighted <- as.POSIXct(data$TargetHighlighted, format = "%H:%M:%OS")
data$TargetClicked <- as.POSIXct(data$TargetClicked, format = "%H:%M:%OS")
data <- data %>%
mutate(MovementTime = as.numeric(TargetClicked - TargetHighlighted, unit ="secs"))
data$TargetIsHit[data$TargetIsHit == '0'] <- FALSE
data$TargetIsHit[data$TargetIsHit == '1'] <- TRUE
data_per_trial <- data %>%
group_by(Participant, Condition, TrialNumber)  %>%
summarise(ErrorRate = 1 - mean(TargetIsHit, na.rm = T), MovementTime = sum(MovementTime, na.rm = T))
# Data for trials in Regular Edge condition
data_per_trial_regular_edge <- data_per_trial %>%
filter(Condition == "Regular Edge")
# Data for trials in Virtual Edge condition
data_per_trial_virtual_edge <- data_per_trial %>%
filter(Condition == "Virtual Edge")
View(data_per_trial)
ggplot(data_per_trial, aes(TrialNumber, mean(MovementTime), fill=Condition)) + geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
ggplot(data_per_trial, aes(TrialNumber, MovementTime, fill=Condition)) + geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
ggplot(data_per_trial, aes(TrialNumber, MovementTime, fill=Condition)) + geom_point() + scale_fill_brewer(palette = "Set1")
ggplot(data_per_trial, aes(TrialNumber, MovementTime, color=Condition)) + geom_point() + scale_color_brewer(palette = "Set1")
Hmsic::smean.cl.normal
install.packages("Hmisc")
Hmsic::smean.cl.normal
library("Hmisc", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
Hmisc::smean.cl.normal
ggplot(data_per_trial, aes(TrialNumber, MovementTime, color=Condition)) +
stat_summary(fun.data = "mean_cl_normal") + scale_color_brewer(palette = "Set1")
ggplot(data_per_trial, aes(TrialNumber, MovementTime, color=Condition)) +
stat_summary(fun.data = "mean_cl_normal", geom = "col") + scale_color_brewer(palette = "Set1")
ggplot(data_per_trial, aes(TrialNumber, MovementTime, color=Condition)) +
stat_summary(fun.data = "mean_cl_normal") + scale_color_brewer(palette = "Set1")
ggplot(data_per_trial, aes(TrialNumber, MovementTime, fill=Condition)) +
stat_summary(fun.data = "mean_cl_normal", geom = "col") + scale_color_brewer(palette = "Set1")
ggplot(data_per_trial, aes(TrialNumber, MovementTime, fill=Condition)) +
stat_summary(fun.data = "mean_cl_normal", geom = "bar") + scale_color_brewer(palette = "Set1")
ggplot(data_per_trial, aes(TrialNumber, MovementTime, fill=Condition)) +
stat_summary(fun.data = "mean_cl_normal", geom = "bar", position = "dodge") +  scale_color_brewer(palette = "Set1")
ggplot(data_per_trial, aes(TrialNumber, MovementTime, color=Condition)) +
stat_summary(fun.data = "mean_cl_normal", position = "dodge") + scale_color_brewer(palette = "Set1")
ggplot(data_per_trial, aes(TrialNumber, MovementTime, color=Condition)) +
stat_summary(fun.data = "mean_cl_normal") + position_dodge(width = 1) + scale_color_brewer(palette = "Set1")
ggplot(data_per_trial, aes(TrialNumber, MovementTime, color=Condition)) +
stat_summary(fun.data = "mean_cl_normal", position = position_dodge(width = 1)) + scale_color_brewer(palette = "Set1")
ggplot(data_per_trial, aes(TrialNumber, MovementTime, fill=Condition)) +
stat_summary(fun.data = "mean_cl_normal", geom = "bar", position = "dodge") +  scale_color_brewer(palette = "Set1")
par(mfrow = c(1,4)) #plot four plots next to each other
data_per_trial %>%
group_by(Condition) %>%
do({
qqPlot(.$MovementTime)
title(main=.$Condition[[1]])
tidy(lillie.test(.$MovementTime))
})
## Clear workspace
rm(list=ls())
# Load Packages
pacman::p_load(
# data processing
plyr,
tidyverse,  # collection of the tidyverse packages
stringr,    #   - for string functions
forcats,    #   - utility functions for working with factor levels
lubridate,  #   - utility for parsing and performing arithematic on dates
tools,      #   - for package development, administration and documentation
data.table, #   - for data manipulation
tibble,      #   - to create data frames
broom      #   - for tidy()
)
import::from(car, qqplot, ncvTest)
## Clear workspace
rm(list=ls())
# Load Packages
pacman::p_load(
# data processing
plyr,
tidyverse,  # collection of the tidyverse packages
stringr,    #   - for string functions
forcats,    #   - utility functions for working with factor levels
lubridate,  #   - utility for parsing and performing arithematic on dates
tools,      #   - for package development, administration and documentation
data.table, #   - for data manipulation
tibble,      #   - to create data frames
broom      #   - for tidy()
)
import::from(car, qqPlot, ncvTest)
import::from(nortest, lillie.test)
import::from(lawstat, levene.test)
par(mfrow = c(1,4)) #plot four plots next to each other
data_per_trial %>%
group_by(Condition) %>%
do({
qqPlot(.$MovementTime)
title(main=.$Condition[[1]])
tidy(lillie.test(.$MovementTime))
})
## Clear workspace
rm(list=ls())
# Load Packages
pacman::p_load(
# data processing
plyr,
tidyverse,  # collection of the tidyverse packages
stringr,    #   - for string functions
forcats,    #   - utility functions for working with factor levels
lubridate,  #   - utility for parsing and performing arithematic on dates
tools,      #   - for package development, administration and documentation
data.table, #   - for data manipulation
tibble,      #   - to create data frames
broom      #   - for tidy()
)
import::from(car, qqPlot, ncvTest)
import::from(nortest, lillie.test)
import::from(lawstat, levene.test)
# Create a function that imports all .csv files from a directory "ExperimentalData"
# Put all your data files from the data collection software in the folder "ExperimentalData".
# file_list <- list.files(path = file.path("ExperimentalData"), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
# data_raw <- do.call("rbind", lapply(file_list, function(filename)
# data.frame(read.delim(filename, sep = ";"))))
# because of a coding problem, participants 11 - 17 were coded as 1 - 7. To correct this problem, we import the data for each participant separately.
data1 <- data.frame(read.delim("ExperimentalData/pointing_1.csv", sep = ";"))
data2 <- data.frame(read.delim("ExperimentalData/pointing_2.csv", sep = ";"))
data3 <- data.frame(read.delim("ExperimentalData/pointing_3.csv", sep = ";"))
data4 <- data.frame(read.delim("ExperimentalData/pointing_4.csv", sep = ";"))
data5 <- data.frame(read.delim("ExperimentalData/pointing_5.csv", sep = ";"))
data6 <- data.frame(read.delim("ExperimentalData/pointing_6.csv", sep = ";"))
data7 <- data.frame(read.delim("ExperimentalData/pointing_7.csv", sep = ";"))
data8 <- data.frame(read.delim("ExperimentalData/pointing_8.csv", sep = ";"))
data9 <- data.frame(read.delim("ExperimentalData/pointing_9.csv", sep = ";"))
data10 <- data.frame(read.delim("ExperimentalData/pointing_10.csv", sep = ";"))
data11 <- data.frame(read.delim("ExperimentalData/pointing_11.csv", sep = ";"))
data11$Part <- rep(11,nrow(data11))
data12 <- data.frame(read.delim("ExperimentalData/pointing_12.csv", sep = ";"))
data12$Part <- rep(12,nrow(data12))
data13 <- data.frame(read.delim("ExperimentalData/pointing_13.csv", sep = ";"))
data13$Part <- rep(13,nrow(data13))
data14 <- data.frame(read.delim("ExperimentalData/pointing_14.csv", sep = ";"))
data14$Part <- rep(14,nrow(data14))
data15 <- data.frame(read.delim("ExperimentalData/pointing_15.csv", sep = ";"))
data15$Part <- rep(15,nrow(data15))
data16 <- data.frame(read.delim("ExperimentalData/pointing_16.csv", sep = ";"))
data16$Part <- rep(16,nrow(data16))
data17 <- data.frame(read.delim("ExperimentalData/pointing_17.csv", sep = ";"))
data17$Part <- rep(17,nrow(data17))
data_raw <- rbind(data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11, data12, data13, data14, data15, data16, data17)
rm(data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11, data12, data13, data14, data15, data16, data17)
# Keep only the columns of interest and give them more readable names
data <- data_raw %>%
select(
Participant = Part,
Condition = Cond,
TrialNumber = Rep,
Block,
TargetNumber = Click,
TargetIsHit = Succ,
TargetHighlighted = Tar_t,
TargetClicked = Click_t,
PosX,
PosY,
Distance = Dist
)
# Remove all Demo Trial from the data set
data <- data %>%
filter(TrialNumber != "demo")
data$Participant <- as.factor(data$Participant)
data$Block <- as.factor(data$Block)
# Renaming of cell values in a more meaningful way
data$Condition[data$Condition == '0'] <- "Regular Edge"
data$Condition[data$Condition == '1'] <- "Virtual Edge"
data$Condition <- as.factor(data$Condition)
options(digits.secs = 3) # Set accuracy to one millisecond
# Convert the timestamps into a time format
data$TargetHighlighted <- as.POSIXct(data$TargetHighlighted, format = "%H:%M:%OS")
data$TargetClicked <- as.POSIXct(data$TargetClicked, format = "%H:%M:%OS")
data <- data %>%
mutate(MovementTime = as.numeric(TargetClicked - TargetHighlighted, unit ="secs"))
data$TargetIsHit[data$TargetIsHit == '0'] <- FALSE
data$TargetIsHit[data$TargetIsHit == '1'] <- TRUE
data_per_trial <- data %>%
group_by(Participant, Condition, TrialNumber)  %>%
summarise(ErrorRate = 1 - mean(TargetIsHit, na.rm = T), MovementTime = sum(MovementTime, na.rm = T))
# Data for trials in Regular Edge condition
data_per_trial_regular_edge <- data_per_trial %>%
filter(Condition == "Regular Edge")
# Data for trials in Virtual Edge condition
data_per_trial_virtual_edge <- data_per_trial %>%
filter(Condition == "Virtual Edge")
par(mfrow = c(1,4)) #plot four plots next to each other
data_per_trial %>%
group_by(Condition) %>%
do({
qqPlot(.$MovementTime)
title(main=.$Condition[[1]])
tidy(lillie.test(.$MovementTime))
})
par(mfrow = c(1,1)) # sets back the default
par(mfrow = c(1,2)) #plot two plots next to each other
data_per_trial %>%
group_by(Condition) %>%
do({
qqPlot(.$MovementTime)
title(main=.$Condition[[1]])
tidy(lillie.test(.$MovementTime))
})
par(mfrow = c(1,1)) # sets back the default
par(mfrow = c(1,2)) #plot two plots next to each other
data_per_trial %>%
group_by(Condition) %>%
do({
qqPlot(.$ErrorRate)
title(main=.$Condition[[1]])
tidy(lillie.test(.$ErrorRate))
})
par(mfrow = c(1,1)) # sets back the default
levene.test(data_per_trial$MovementTime, data_per_trial$Condition, location = "median")
levene.test(data_per_trial$MovementTime, data_per_trial$Condition, location = "median")
levene.test(data_per_trial$MovementTime, data_per_trial$Condition, location = "median")
levene.test(data_per_trial$ErrorRate, data_per_trial$Condition, location = "median")
levene.test(data_per_trial$ErrorRate, data_per_trial$Condition, location = "median")
par(mfrow = c(1,2)) #plot two plots next to each other
data_per_trial %>%
group_by(Condition) %>%
do({
qqPlot(log(.$ErrorRate))
title(main=.$Condition[[1]])
tidy(lillie.test(log(.$ErrorRate)))
})
par(mfrow = c(1,2)) #plot two plots next to each other
data_per_trial %>%
group_by(Condition) %>%
do({
qqPlot(log(.$ErrorRate + 2))
title(main=.$Condition[[1]])
tidy(lillie.test(log(.$ErrorRate + 2)))
})
par(mfrow = c(1,1)) # sets back the default
levene.test(data_per_trial$ErrorRate, data_per_trial$Condition, location = "median")
fit_movementTime <- lm(MovementTime ~ Condition + TrialNumber + Condtion*TrialNumber, data_per_trial)
fit_movementTime <- lm(MovementTime ~ Condition + TrialNumber + Condition*TrialNumber, data_per_trial)
summary(fit_movementTime)
p_M_C_resid <- data_per_trial %>%
ggplot(., aes(x = MovementTime, y = fit_movementTime$residuals)) +
geom_point() +
geom_hline(yintercept = 0, col = "red")
p_M_C_resid
car::qqPlot(fit_movementTime$residuals)
anova_r <- anova(fit_movementTime)
anova_t <- tidy(anova_r)   # extract parameters for the report
anova_t
anova_r
step_backward_result <-
MASS::stepAIC(fit_movementTime,
direction = "backward",
trace = TRUE
)
step_backward_result <-
MASS::stepAIC(fit_movementTime,
direction = "backward",
trace = TRUE
)
step_backward_result <-
MASS::stepAIC(fit_movementTime,
direction = "backward",
trace = TRUE
)
pairwise <- glht(fit_movementTime, linfct = mcp(Condition = "Tukey"))
import::from(multcomp, glht)
pairwise <- glht(fit_movementTime, linfct = mcp(Condition = "Tukey"))
import::from(multcomp, glht, mcp)
pairwise <- glht(fit_movementTime, linfct = mcp(Condition = "Tukey"))
ci_pairwise <- tidy(confint(pairwise))
pairwise <-
ci_pairwise %>%
ggplot(aes(x = lhs, y = estimate, ymin = conf.low, ymax = conf.high)) +
geom_pointrange() +
geom_hline(yintercept = 0, color = "red") +
xlab("hypothesis") +
ylab("throughput") +
coord_flip()
pairwise
## Clear workspace
rm(list=ls())
# Load Packages
pacman::p_load(
# data processing
plyr,
tidyverse,  # collection of the tidyverse packages
stringr,    #   - for string functions
forcats,    #   - utility functions for working with factor levels
lubridate,  #   - utility for parsing and performing arithematic on dates
tools,      #   - for package development, administration and documentation
data.table, #   - for data manipulation
tibble,      #   - to create data frames
broom      #   - for tidy()
)
import::from(car, qqPlot, ncvTest)
import::from(nortest, lillie.test)
import::from(lawstat, levene.test)
data_per_trial_regular_edge %>%
ggplot(., aes(x = TrialNumber, y = ErrorRate)) +
geom_point() +
geom_smooth(method = "lm", size = 1.5, color = "red")
## Clear workspace
rm(list=ls())
# Load Packages
pacman::p_load(
# data processing
plyr,
tidyverse,  # collection of the tidyverse packages
stringr,    #   - for string functions
forcats,    #   - utility functions for working with factor levels
lubridate,  #   - utility for parsing and performing arithematic on dates
tools,      #   - for package development, administration and documentation
data.table, #   - for data manipulation
tibble,      #   - to create data frames
broom      #   - for tidy()
)
import::from(car, qqPlot, ncvTest)
import::from(nortest, lillie.test)
import::from(lawstat, levene.test)
# Create a function that imports all .csv files from a directory "ExperimentalData"
# Put all your data files from the data collection software in the folder "ExperimentalData".
# file_list <- list.files(path = file.path("ExperimentalData"), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
# data_raw <- do.call("rbind", lapply(file_list, function(filename)
# data.frame(read.delim(filename, sep = ";"))))
# because of a coding problem, participants 11 - 17 were coded as 1 - 7. To correct this problem, we import the data for each participant separately.
data1 <- data.frame(read.delim("ExperimentalData/pointing_1.csv", sep = ";"))
data2 <- data.frame(read.delim("ExperimentalData/pointing_2.csv", sep = ";"))
data3 <- data.frame(read.delim("ExperimentalData/pointing_3.csv", sep = ";"))
data4 <- data.frame(read.delim("ExperimentalData/pointing_4.csv", sep = ";"))
data5 <- data.frame(read.delim("ExperimentalData/pointing_5.csv", sep = ";"))
data6 <- data.frame(read.delim("ExperimentalData/pointing_6.csv", sep = ";"))
data7 <- data.frame(read.delim("ExperimentalData/pointing_7.csv", sep = ";"))
data8 <- data.frame(read.delim("ExperimentalData/pointing_8.csv", sep = ";"))
data9 <- data.frame(read.delim("ExperimentalData/pointing_9.csv", sep = ";"))
data10 <- data.frame(read.delim("ExperimentalData/pointing_10.csv", sep = ";"))
data11 <- data.frame(read.delim("ExperimentalData/pointing_11.csv", sep = ";"))
data11$Part <- rep(11,nrow(data11))
data12 <- data.frame(read.delim("ExperimentalData/pointing_12.csv", sep = ";"))
data12$Part <- rep(12,nrow(data12))
data13 <- data.frame(read.delim("ExperimentalData/pointing_13.csv", sep = ";"))
data13$Part <- rep(13,nrow(data13))
data14 <- data.frame(read.delim("ExperimentalData/pointing_14.csv", sep = ";"))
data14$Part <- rep(14,nrow(data14))
data15 <- data.frame(read.delim("ExperimentalData/pointing_15.csv", sep = ";"))
data15$Part <- rep(15,nrow(data15))
data16 <- data.frame(read.delim("ExperimentalData/pointing_16.csv", sep = ";"))
data16$Part <- rep(16,nrow(data16))
data17 <- data.frame(read.delim("ExperimentalData/pointing_17.csv", sep = ";"))
data17$Part <- rep(17,nrow(data17))
data_raw <- rbind(data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11, data12, data13, data14, data15, data16, data17)
rm(data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11, data12, data13, data14, data15, data16, data17)
# Keep only the columns of interest and give them more readable names
data <- data_raw %>%
select(
Participant = Part,
Condition = Cond,
TrialNumber = Rep,
Block,
TargetNumber = Click,
TargetIsHit = Succ,
TargetHighlighted = Tar_t,
TargetClicked = Click_t,
PosX,
PosY,
Distance = Dist
)
# Remove all Demo Trial from the data set
data <- data %>%
filter(TrialNumber != "demo")
data$Participant <- as.factor(data$Participant)
data$Block <- as.factor(data$Block)
# Renaming of cell values in a more meaningful way
data$Condition[data$Condition == '0'] <- "Regular Edge"
data$Condition[data$Condition == '1'] <- "Virtual Edge"
data$Condition <- as.factor(data$Condition)
options(digits.secs = 3) # Set accuracy to one millisecond
# Convert the timestamps into a time format
data$TargetHighlighted <- as.POSIXct(data$TargetHighlighted, format = "%H:%M:%OS")
data$TargetClicked <- as.POSIXct(data$TargetClicked, format = "%H:%M:%OS")
data <- data %>%
mutate(MovementTime = as.numeric(TargetClicked - TargetHighlighted, unit ="secs"))
data$TargetIsHit[data$TargetIsHit == '0'] <- FALSE
data$TargetIsHit[data$TargetIsHit == '1'] <- TRUE
data_per_trial <- data %>%
group_by(Participant, Condition, TrialNumber)  %>%
summarise(ErrorRate = 1 - mean(TargetIsHit, na.rm = T), MovementTime = sum(MovementTime, na.rm = T))
# Data for trials in Regular Edge condition
data_per_trial_regular_edge <- data_per_trial %>%
filter(Condition == "Regular Edge")
# Data for trials in Virtual Edge condition
data_per_trial_virtual_edge <- data_per_trial %>%
filter(Condition == "Virtual Edge")
data_per_trial_regular_edge %>%
ggplot(., aes(x = TrialNumber, y = ErrorRate)) +
geom_point() +
geom_smooth(method = "lm", size = 1.5, color = "red")
data_per_trial_virtual_edge %>%
ggplot(., aes(x = TrialNumber, y = ErrorRate)) +
geom_point() +
geom_smooth(method = "lm", size = 1.5, color = "red")
ggplot(data_per_trial, aes(TrialNumber, ErrorRate, color=Condition)) +
stat_summary(fun.data = "mean_cl_normal", position = position_dodge(width = 1)) + scale_color_brewer(palette = "Set1")
ggplot(data_per_trial, aes(TrialNumber, ErrorRate, fill=Condition)) +
stat_summary(fun.data = "mean_cl_normal", geom = "bar", position = "dodge") +  scale_color_brewer(palette = "Set1")
fit_errorRate <- lm(log(ErrorRate) ~ Condition + TrialNumber + Condition*TrialNumber, data_per_trial)
fit_errorRate <- lm(log(ErrorRate + 2) ~ Condition + TrialNumber + Condition*TrialNumber, data_per_trial)
summary(fit_errorRate)
p_E_C_resid <- data_per_trial %>%
ggplot(., aes(x = log(ErrorRate + 2), y = fit_errorRate$residuals)) +
geom_point() +
geom_hline(yintercept = 0, col = "red")
p_E_C_resid
p_E_C_resid <- data_per_trial %>%
ggplot(., aes(x = ErrorRate, y = fit_errorRate$residuals)) +
geom_point() +
geom_hline(yintercept = 0, col = "red")
p_E_C_resid
p_E_C_resid <- data_per_trial %>%
ggplot(., aes(x = log(ErrorRate + 2), y = fit_errorRate$residuals)) +
geom_point() +
geom_hline(yintercept = 0, col = "red")
p_E_C_resid
car::qqPlot(fit_errorRate$residuals)
anova_r <- anova(fit_errorRate)
anova_t <- tidy(anova_r)   # extract parameters for the report
anova_t
anova_r
anova_r <- anova(fit_errorRate)
anova_t <- tidy(anova_r)   # extract parameters for the report
anova_t
step_backward_result <-
MASS::stepAIC(fit_errorRate,
direction = "backward",
trace = TRUE
)
