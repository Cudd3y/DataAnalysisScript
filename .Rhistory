rbind?
?rbind
file_list <- list.files(path = file.path("PilotData", dir_name), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
file_list <- list.files(path = file.path("PilotData"), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
raw_data <- do.call("rbind", lapply(file_list, function(filename)
data.frame(read.delim(filename, sep = ","))))
View(raw_data)
View(raw_data)
file_list <- list.files(path = file.path("PilotData"), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
raw_data <- do.call("rbind", lapply(file_list, function(filename)
data.frame(read.delim(filename, sep = ";"))))
View(raw_data)
data_raw <- data_raw %>%
select(
Participant = Part,
Condition = Cond,
Block,
Trial,
TargetNumber = Click,
# Muss in der neuen Version wieder zurück vertauscht (Click_t & Tar_t) werden. Die Spalten sind im Moment noch falsch beschriftet.
TargetHighlighted = Click_t,
TargetClicked = Tar_t,
PosX,
PosY,
Distance = Dist,
Success = Succ
)
file_list <- list.files(path = file.path("PilotData"), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
raw_data <- do.call("rbind", lapply(file_list, function(filename)
data.frame(read.delim(filename, sep = ";"))))
data_raw <- data_raw %>%
select(
Participant = Part,
Condition = Cond,
Block,
Trial,
TargetNumber = Click,
# Muss in der neuen Version wieder zurück vertauscht (Click_t & Tar_t) werden. Die Spalten sind im Moment noch falsch beschriftet.
TargetHighlighted = Click_t,
TargetClicked = Tar_t,
PosX,
PosY,
Distance = Dist,
Success = Succ
)
select(
Participant = Part,
Condition = Cond,
Block,
Trial,
TargetNumber = Click,
TargetHighlighted = Click_t,
TargetClicked = Tar_t,
PosX,
PosY,
Distance = Dist,
Success = Succ
data_raw <- data_raw %>%
select(
Participant = Part,
Condition = Cond,
Block,
Trial,
TargetNumber = Click,
TargetHighlighted = Click_t,
TargetClicked = Tar_t,
PosX,
PosY,
Distance = Dist,
Success = Succ
)
pacman::p_load(
# data processing
tidyverse,  # collection of the tidyverse packages
stringr,    #   - for string functions
forcats,    #   - utility functions for working with factor levels
lubridate,  #   - utility for parsing and performing arithematic on dates
tools,      #   - for package development, administration and documentation
data.table, #   - for data manipulation
tibble     #   - to create data frames
)
data_raw <- data_raw %>%
select(
Participant = Part,
Condition = Cond,
Block,
Trial,
TargetNumber = Click,
TargetHighlighted = Click_t,
TargetClicked = Tar_t,
PosX,
PosY,
Distance = Dist,
Success = Succ
)
file_list <- list.files(path = file.path("PilotData"), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
raw_data <- do.call("rbind", lapply(file_list, function(filename)
data.frame(read.delim(filename, sep = ";"))))
data_raw <- data_raw %>%
select(
Participant = Part,
Condition = Cond,
Block,
Trial,
TargetNumber = Click,
TargetHighlighted = Click_t,
TargetClicked = Tar_t,
PosX,
PosY,
Distance = Dist,
Success = Succ
)
data_raw <- do.call("rbind", lapply(file_list, function(filename)
data.frame(read.delim(filename, sep = ";"))))
data_raw <- data_raw %>%
select(
Participant = Part,
Condition = Cond,
Block,
Trial,
TargetNumber = Click,
TargetHighlighted = Click_t,
TargetClicked = Tar_t,
PosX,
PosY,
Distance = Dist,
Success = Succ
)
View(data_raw)
# =============================================
# Pilot Study: Analysis of the collected Data
# =============================================
pacman::p_load(
# data processing
tidyverse,  # collection of the tidyverse packages
stringr,    #   - for string functions
forcats,    #   - utility functions for working with factor levels
lubridate,  #   - utility for parsing and performing arithematic on dates
tools,      #   - for package development, administration and documentation
data.table, #   - for data manipulation
tibble     #   - to create data frames
)
## Data Import
# Create a function that imports all .csv files from a directory
file_list <- list.files(path = file.path("PilotData"), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
data_raw <- do.call("rbind", lapply(file_list, function(filename)
data.frame(read.delim(filename, sep = ";"))))
# Keep only the columns of interest and give them more readable names
data <- data_raw %>%
select(
Participant = Part,
Condition = Cond,
Block,
Trial,
TargetNumber = Click,
TargetHighlighted = Click_t,
TargetClicked = Tar_t,
PosX,
PosY,
Distance = Dist,
Success = Succ
)
# =============================================
# Pilot Study: Analysis of the collected Data
# =============================================
pacman::p_load(
# data processing
tidyverse,  # collection of the tidyverse packages
stringr,    #   - for string functions
forcats,    #   - utility functions for working with factor levels
lubridate,  #   - utility for parsing and performing arithematic on dates
tools,      #   - for package development, administration and documentation
data.table, #   - for data manipulation
tibble     #   - to create data frames
)
## Data Import
# Create a function that imports all .csv files from a directory
file_list <- list.files(path = file.path("PilotData"), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
data_raw <- do.call("rbind", lapply(file_list, function(filename)
data.frame(read.delim(filename, sep = ";"))))
# Keep only the columns of interest and give them more readable names
data <- data_raw %>%
select(
Participant = Part,
Condition = Cond,
Block,
Trial,
TargetNumber = Click,
TargetHighlighted = Click_t,
TargetClicked = Tar_t,
PosX,
PosY,
Distance = Dist,
Success = Succ
)
select?
?select
?rename
data <- data %>%
select(Condidition) %>%
rename_if(0, "Regular Edge")
data <- data %>%
select(Condition) %>%
rename_if(0, "Regular Edge")
data$Condition[data$Condition == '0'] <- "Edge Condition"
View(data)
data$Condition[data$Condition == '0'] <- "Regular Edge"
data$Condition[data$Condition == '1'] <- "Virtual Edge"
View(data)
file_list <- list.files(path = file.path("PilotData"), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
data_raw <- do.call("rbind", lapply(file_list, function(filename)
data.frame(read.delim(filename, sep = ";"))))
data <- data_raw %>%
select(
Participant = Part,
Condition = Cond,
Block,
TrialNumber = Trial,
TargetNumber = Click,
TargetHighlighted = Click_t,
TargetClicked = Tar_t,
PosX,
PosY,
Distance = Dist,
Success = Succ
)
data$Condition[data$Condition == '0'] <- "Regular Edge"
data$Condition[data$Condition == '1'] <- "Virtual Edge"
data$Block[data$Block == '0'] <- "Demo"
data$Block[data$Block == '0'] <- "Demo"
data$TargetIsHit[data$TargetIsHit == '0'] <- "FALSE"
data$TargetIsHit[data$TargetIsHit == '1'] <- "TRUE"
file_list <- list.files(path = file.path("PilotData"), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
data_raw <- do.call("rbind", lapply(file_list, function(filename)
data.frame(read.delim(filename, sep = ";"))))
data <- data_raw %>%
select(
Participant = Part,
Condition = Cond,
Block,
TrialNumber = Trial,
TargetNumber = Click,
TargetHighlighted = Click_t,
TargetClicked = Tar_t,
PosX,
PosY,
Distance = Dist,
TargetIsHit = Succ
)
data$Condition[data$Condition == '0'] <- "Regular Edge"
data$Condition[data$Condition == '1'] <- "Virtual Edge"
data$Block[data$Block == '0'] <- "Demo"
data$TargetIsHit[data$TargetIsHit == '0'] <- "FALSE"
data$TargetIsHit[data$TargetIsHit == '1'] <- "TRUE"
data_raw <- do.call("rbind", lapply(file_list, function(filename)
data.frame(read.delim(filename, sep = ";"))))
data <- data_raw %>%
select(
Participant = Part,
Condition = Cond,
Block,
TrialNumber = Trial,
MovementTime,
TargetNumber = Click,
TargetHighlighted = Click_t,
TargetClicked = Tar_t,
PosX,
PosY,
Distance = Dist,
TargetIsHit = Succ
)
data_aggregation <- data["AggregatedTime""]
data_aggregation["AggregatedTime""] <- NA
data_aggregation["AggregatedTime""] <- "NA"
data["AggregatedTime""] <- "NA"
>data["AggregatedTime""] <- "NA"
# =============================================
# Pilot Study: Analysis of the collected Data
# =============================================
# =============================================
# Load Packages
pacman::p_load(
# data processing
tidyverse,  # collection of the tidyverse packages
stringr,    #   - for string functions
forcats,    #   - utility functions for working with factor levels
lubridate,  #   - utility for parsing and performing arithematic on dates
tools,      #   - for package development, administration and documentation
data.table, #   - for data manipulation
tibble     #   - to create data frames
)
# =============================================
## Data Import
# Create a function that imports all .csv files from a directory
file_list <- list.files(path = file.path("PilotData"), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
data_raw <- do.call("rbind", lapply(file_list, function(filename)
data.frame(read.delim(filename, sep = ";"))))
# Keep only the columns of interest and give them more readable names
data <- data_raw %>%
select(
Participant = Part,
Condition = Cond,
Block,
TrialNumber = Trial,
TargetNumber = Click,
TargetHighlighted = Click_t,
TargetClicked = Tar_t,
PosX,
PosY,
Distance = Dist,
TargetIsHit = Succ
)
# Renaming of cell values in a more meaningful way
data$Condition[data$Condition == '0'] <- "Regular Edge"
data$Condition[data$Condition == '1'] <- "Virtual Edge"
data$Block[data$Block == '0'] <- "Demo"
data$TargetIsHit[data$TargetIsHit == '0'] <- "FALSE"
data$TargetIsHit[data$TargetIsHit == '1'] <- "TRUE"
# Calculate Movement Time per Sequence
data["AggregatedTime""] <- "NA"
data["AggregatedTime""] <- "NA"
data["AggregatedTime""] <- NA
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
# =============================================
# Pilot Study: Analysis of the collected Data
# =============================================
# =============================================
# Load Packages
pacman::p_load(
# data processing
tidyverse,  # collection of the tidyverse packages
stringr,    #   - for string functions
forcats,    #   - utility functions for working with factor levels
lubridate,  #   - utility for parsing and performing arithematic on dates
tools,      #   - for package development, administration and documentation
data.table, #   - for data manipulation
tibble     #   - to create data frames
)
# =============================================
## Data Import
# Create a function that imports all .csv files from a directory
file_list <- list.files(path = file.path("PilotData"), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
data_raw <- do.call("rbind", lapply(file_list, function(filename)
data.frame(read.delim(filename, sep = ";"))))
# Keep only the columns of interest and give them more readable names
data <- data_raw %>%
select(
Participant = Part,
Condition = Cond,
Block,
TrialNumber = Trial,
TargetNumber = Click,
TargetHighlighted = Click_t,
TargetClicked = Tar_t,
PosX,
PosY,
Distance = Dist,
TargetIsHit = Succ
)
# Renaming of cell values in a more meaningful way
data$Condition[data$Condition == '0'] <- "Regular Edge"
data$Condition[data$Condition == '1'] <- "Virtual Edge"
data$Block[data$Block == '0'] <- "Demo"
data$TargetIsHit[data$TargetIsHit == '0'] <- "FALSE"
data$TargetIsHit[data$TargetIsHit == '1'] <- "TRUE"
# Calculate Movement Time per Sequence
data["AggregatedTime""] <- NA
View(data)
file_list <- list.files(path = file.path("PilotData"), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
pacman::p_load(
# data processing
tidyverse,  # collection of the tidyverse packages
stringr,    #   - for string functions
forcats,    #   - utility functions for working with factor levels
lubridate,  #   - utility for parsing and performing arithematic on dates
tools,      #   - for package development, administration and documentation
data.table, #   - for data manipulation
tibble     #   - to create data frames
)
file_list <- list.files(path = file.path("PilotData"), pattern = "*.csv", recursive = TRUE, full.names = TRUE)
data_raw <- do.call("rbind", lapply(file_list, function(filename)
data.frame(read.delim(filename, sep = ";"))))
data <- data_raw %>%
select(
Participant = Part,
Condition = Cond,
Block,
TrialNumber = Trial,
TargetNumber = Click,
TargetHighlighted = Click_t,
TargetClicked = Tar_t,
PosX,
PosY,
Distance = Dist,
TargetIsHit = Succ
)
data$Condition[data$Condition == '0'] <- "Regular Edge"
data$Condition[data$Condition == '1'] <- "Virtual Edge"
data$Block[data$Block == '0'] <- "Demo"
data$TargetIsHit[data$TargetIsHit == '0'] <- "FALSE"
data$TargetIsHit[data$TargetIsHit == '1'] <- "TRUE"
data["AggregatedTime""] <- NA
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
data$Condition[data$Condition == '0'] <- "Regular Edge"
data$Condition[data$Condition == '1'] <- "Virtual Edge"
data$Block[data$Block == '0'] <- "Demo"
data$TargetIsHit[data$TargetIsHit == '0'] <- "FALSE"
data$TargetIsHit[data$TargetIsHit == '1'] <- "TRUE"
?mutatue
?mutate
mustat(data, movementTime = data$TargetClicked - data$TargetHighlighted, unit="secs")
mutate(data, movementTime = data$TargetClicked - data$TargetHighlighted, unit="secs")
mutate(data, movementTime = TargetClicked - TargetHighlighted, unit="secs")
mutate(data, movementTime = TargetClicked - TargetHighlighted, unit="secs")
data$TargetIsHit[data$TargetIsHit == '0'] <- "FALSE"
data$TargetIsHit[data$TargetIsHit == '1'] <- "TRUE"
data$TargetHighlighted[data$TargetHighlighted == as.Date()]
data$TargetHighlighted[data$TargetHighlighted == as.Date(TargetHighlighted)]
data$TargetHighlighted[as.Date(TargetHighlighted)]
data$TargetHighlighted[as.Date(data$TargetHighlighted)]
data$TargetHighlighted[as.Date(data$TargetHighlighted)]
data$TargetHighlighted[as.Date(data$TargetHighlighted, "hh:mm:ss:ss")]
data$TargetHighlighted[as.Date(data$TargetHighlighted, "hh:mm:ss:*")]
